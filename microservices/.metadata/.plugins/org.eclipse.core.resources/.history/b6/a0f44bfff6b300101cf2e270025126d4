package com.tss.employee_service.service.impl;

import java.util.List;
import java.util.stream.Collectors;

import org.modelmapper.ModelMapper;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;

import com.tss.employee_service.dto.DepartmentDto;
import com.tss.employee_service.dto.EmployeeApiResponse;
import com.tss.employee_service.dto.EmployeeDTO;
import com.tss.employee_service.entity.Employee;
import com.tss.employee_service.repository.EmployeeRepository;
import com.tss.employee_service.service.EmployeeService;

@Service
public class EmployeeServiceImpl implements EmployeeService {

    private final EmployeeRepository employeeRepository;
    private final ModelMapper modelMapper;
    private final RestTemplate restTemplate;

    public EmployeeServiceImpl(EmployeeRepository employeeRepository, ModelMapper modelMapper, RestTemplate restTemplate) {
        this.employeeRepository = employeeRepository;
        this.modelMapper = modelMapper;
        this.restTemplate = restTemplate;
    }

    @Override
    public List<EmployeeDTO> getAllEmployees() {
        return employeeRepository.findAll().stream()
                .map(emp -> modelMapper.map(emp, EmployeeDTO.class))
                .collect(Collectors.toList());
    }


    @Override
    public EmployeeApiResponse readAnEmployee(long employeeId) {
        Optional<Employee> dbEmployee = employeeRepository.findById(employeeId)
                .orElseThrow(() -> new RuntimeException("Employee not found"));

        ResponseEntity<DepartmentDto> departmentResponse = restTemplate.getForEntity(
                "http://localhost:8082/departments/" + dbEmployee.getDepartmentId(),
                DepartmentDto.class);

        EmployeeApiResponse response = new EmployeeApiResponse();
        response.setEmployee(modelMapper.map(dbEmployee, EmployeeDTO.class));
        response.setDepartment(departmentResponse.getBody());

        return response;
    }

}
