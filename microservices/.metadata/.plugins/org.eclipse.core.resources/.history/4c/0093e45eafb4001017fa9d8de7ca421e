package com.tss.department_service.controller;

import java.util.List;

import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.tss.department_service.dto.DepartmentDTO;
import com.tss.department_service.service.DepartmentService;

@RestController
@RequestMapping("/api/departments")
public class DepartmentController {

    private final DepartmentService departmentService;

    public DepartmentController(DepartmentService departmentService) {
        this.departmentService = departmentService;
    }



    // Get all departments
    @GetMapping
    public ResponseEntity<List<DepartmentDTO>> getAllDepartments() {
        return ResponseEntity.ok(departmentService.getAllDepartments());
    }

    // Get department by ID
    @GetMapping("/{id}")
    public ResponseEntity<DepartmentDTO> getDepartmentById(@PathVariable Long id) {
        return ResponseEntity.ok(departmentService.getDepartmentById(id));
    }
    

    // ✅ 1. Get all employees under a particular department
    @GetMapping("/{id}/employees")
    public ResponseEntity<List<EmployeeDTO>> getEmployeesByDepartment(@PathVariable Long id) {
        return ResponseEntity.ok(departmentService.getEmployeesByDepartment(id));
    }

    // ✅ 2. Update an employee’s department
    @PutMapping("/employee/{employeeId}/department/{newDeptId}")
    public ResponseEntity<EmployeeDTO> updateEmployeeDepartment(
            @PathVariable Long employeeId,
            @PathVariable Long newDeptId) {
        return ResponseEntity.ok(departmentService.updateEmployeeDepartment(employeeId, newDeptId));
    }
}
